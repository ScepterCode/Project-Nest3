// Test Supabase connection and diagnose issues
// Run this with: node test-supabase-connection.js

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

async function testSupabaseConnection() {
  console.log('üîç Testing Supabase Connection...\n');
  
  // Check environment variables
  console.log('üìã Environment Variables:');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ Set' : '‚ùå Missing');
  console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‚úÖ Set' : '‚ùå Missing');
  console.log('URL:', process.env.NEXT_PUBLIC_SUPABASE_URL);
  console.log('Key (first 20 chars):', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY?.substring(0, 20) + '...\n');

  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
    console.error('‚ùå Missing required environment variables');
    return;
  }

  // Create Supabase client
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );

  console.log('üîó Testing basic connectivity...');
  
  try {
    // Test 1: Basic connection
    const { data, error } = await supabase
      .from('users')
      .select('count')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Basic connection failed:', {
        message: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      });
    } else {
      console.log('‚úÖ Basic connection successful');
    }
  } catch (err) {
    console.error('‚ùå Connection error:', err.message);
  }

  console.log('\nüîê Testing authentication...');
  
  try {
    // Test 2: Auth status
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError) {
      console.error('‚ùå Auth error:', authError.message);
    } else if (user) {
      console.log('‚úÖ User authenticated:', user.email);
    } else {
      console.log('‚ÑπÔ∏è No authenticated user (this is normal for testing)');
    }
  } catch (err) {
    console.error('‚ùå Auth test error:', err.message);
  }

  console.log('\nüìä Testing table access...');
  
  const tables = ['users', 'classes', 'assignments', 'institutions'];
  
  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1);
      
      if (error) {
        console.log(`‚ùå ${table}:`, error.message);
      } else {
        console.log(`‚úÖ ${table}: accessible`);
      }
    } catch (err) {
      console.log(`‚ùå ${table}: ${err.message}`);
    }
  }

  console.log('\nüåê Testing network connectivity...');
  
  try {
    const response = await fetch(process.env.NEXT_PUBLIC_SUPABASE_URL + '/rest/v1/', {
      headers: {
        'apikey': process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`
      }
    });
    
    if (response.ok) {
      console.log('‚úÖ Direct API access successful');
    } else {
      console.log('‚ùå Direct API access failed:', response.status, response.statusText);
    }
  } catch (err) {
    console.error('‚ùå Network error:', err.message);
  }
}

testSupabaseConnection().catch(console.error);